// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createAttendance = `-- name: CreateAttendance :exec
INSERT INTO attendance (user_id, date, entry_time, exit_time) 
VALUES (?, ?, ?, ?)
`

type CreateAttendanceParams struct {
	UserID    sql.NullInt64  `json:"user_id"`
	Date      string         `json:"date"`
	EntryTime sql.NullString `json:"entry_time"`
	ExitTime  sql.NullString `json:"exit_time"`
}

func (q *Queries) CreateAttendance(ctx context.Context, arg CreateAttendanceParams) error {
	_, err := q.db.ExecContext(ctx, createAttendance,
		arg.UserID,
		arg.Date,
		arg.EntryTime,
		arg.ExitTime,
	)
	return err
}

const createRole = `-- name: CreateRole :exec

INSERT INTO roles (role_name) 
VALUES (?)
`

// Roles Queries
func (q *Queries) CreateRole(ctx context.Context, roleName string) error {
	_, err := q.db.ExecContext(ctx, createRole, roleName)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (first_name, last_name, phone_number, image_path, role_id, is_admin) 
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	ImagePath   sql.NullString `json:"image_path"`
	RoleID      sql.NullInt64  `json:"role_id"`
	IsAdmin     sql.NullInt64  `json:"is_admin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.ImagePath,
		arg.RoleID,
		arg.IsAdmin,
	)
	return err
}

const deleteAttendance = `-- name: DeleteAttendance :exec
DELETE FROM attendance WHERE attendance_id = ?
`

func (q *Queries) DeleteAttendance(ctx context.Context, attendanceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAttendance, attendanceID)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE role_id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, roleID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRole, roleID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getAllUsersAttendanceByDate = `-- name: GetAllUsersAttendanceByDate :many
SELECT 
    attendance.attendance_id, 
    attendance.user_id, 
    users.first_name, 
    users.last_name, 
    attendance.date, 
    attendance.entry_time, 
    attendance.exit_time
FROM 
    attendance
INNER JOIN 
    users ON attendance.user_id = users.user_id
WHERE 
    attendance.date = ?
`

type GetAllUsersAttendanceByDateRow struct {
	AttendanceID int64          `json:"attendance_id"`
	UserID       sql.NullInt64  `json:"user_id"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	Date         string         `json:"date"`
	EntryTime    sql.NullString `json:"entry_time"`
	ExitTime     sql.NullString `json:"exit_time"`
}

func (q *Queries) GetAllUsersAttendanceByDate(ctx context.Context, date string) ([]GetAllUsersAttendanceByDateRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsersAttendanceByDate, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersAttendanceByDateRow
	for rows.Next() {
		var i GetAllUsersAttendanceByDateRow
		if err := rows.Scan(
			&i.AttendanceID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Date,
			&i.EntryTime,
			&i.ExitTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttendanceByUserIDAndDate = `-- name: GetAttendanceByUserIDAndDate :one
SELECT attendance_id, user_id, date, entry_time, exit_time 
FROM attendance 
WHERE user_id = ? AND date = ?
`

type GetAttendanceByUserIDAndDateParams struct {
	UserID sql.NullInt64 `json:"user_id"`
	Date   string        `json:"date"`
}

func (q *Queries) GetAttendanceByUserIDAndDate(ctx context.Context, arg GetAttendanceByUserIDAndDateParams) (Attendance, error) {
	row := q.db.QueryRowContext(ctx, getAttendanceByUserIDAndDate, arg.UserID, arg.Date)
	var i Attendance
	err := row.Scan(
		&i.AttendanceID,
		&i.UserID,
		&i.Date,
		&i.EntryTime,
		&i.ExitTime,
	)
	return i, err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT role_id, role_name 
FROM roles 
WHERE role_id = ?
`

func (q *Queries) GetRoleByID(ctx context.Context, roleID int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, roleID)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}

const getUserAttendanceBetweenDates = `-- name: GetUserAttendanceBetweenDates :many
SELECT 
    attendance.attendance_id, 
    attendance.user_id, 
    users.first_name, 
    users.last_name, 
    attendance.date, 
    attendance.entry_time, 
    attendance.exit_time
FROM 
    attendance
INNER JOIN 
    users ON attendance.user_id = users.user_id
WHERE 
    attendance.user_id = ? 
AND 
    attendance.date BETWEEN ? AND ?
`

type GetUserAttendanceBetweenDatesRow struct {
	AttendanceID int64          `json:"attendance_id"`
	UserID       sql.NullInt64  `json:"user_id"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	Date         string         `json:"date"`
	EntryTime    sql.NullString `json:"entry_time"`
	ExitTime     sql.NullString `json:"exit_time"`
}

func (q *Queries) GetUserAttendanceBetweenDates(ctx context.Context, userID sql.NullInt64) ([]GetUserAttendanceBetweenDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserAttendanceBetweenDates, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserAttendanceBetweenDatesRow
	for rows.Next() {
		var i GetUserAttendanceBetweenDatesRow
		if err := rows.Scan(
			&i.AttendanceID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Date,
			&i.EntryTime,
			&i.ExitTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, first_name, last_name, phone_number, image_path, role_id, is_admin 
FROM users 
WHERE user_id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ImagePath,
		&i.RoleID,
		&i.IsAdmin,
	)
	return i, err
}

const updateAttendance = `-- name: UpdateAttendance :exec
UPDATE attendance 
SET entry_time = ?, exit_time = ? 
WHERE user_id = ? AND date = ?
`

type UpdateAttendanceParams struct {
	EntryTime sql.NullString `json:"entry_time"`
	ExitTime  sql.NullString `json:"exit_time"`
	UserID    sql.NullInt64  `json:"user_id"`
	Date      string         `json:"date"`
}

func (q *Queries) UpdateAttendance(ctx context.Context, arg UpdateAttendanceParams) error {
	_, err := q.db.ExecContext(ctx, updateAttendance,
		arg.EntryTime,
		arg.ExitTime,
		arg.UserID,
		arg.Date,
	)
	return err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles 
SET role_name = ? 
WHERE role_id = ?
`

type UpdateRoleParams struct {
	RoleName string `json:"role_name"`
	RoleID   int64  `json:"role_id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.RoleName, arg.RoleID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET first_name = ?, last_name = ?, phone_number = ?, image_path = ?, role_id = ?, is_admin = ? 
WHERE user_id = ?
`

type UpdateUserParams struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	ImagePath   sql.NullString `json:"image_path"`
	RoleID      sql.NullInt64  `json:"role_id"`
	IsAdmin     sql.NullInt64  `json:"is_admin"`
	UserID      int64          `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.ImagePath,
		arg.RoleID,
		arg.IsAdmin,
		arg.UserID,
	)
	return err
}
