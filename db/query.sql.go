// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admin (user_name, password) 
VALUES (?, ?)
RETURNING user_name
`

type CreateAdminParams struct {
	UserName string `json:"user_name"`
	Password string `json:"password"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, arg.UserName, arg.Password)
	var user_name string
	err := row.Scan(&user_name)
	return user_name, err
}

const createEntrance = `-- name: CreateEntrance :one
INSERT INTO entrance (user_id, entry_time) 
VALUES (?, ?)
RETURNING id
`

type CreateEntranceParams struct {
	UserID    int64 `json:"user_id"`
	EntryTime int64 `json:"entry_time"`
}

func (q *Queries) CreateEntrance(ctx context.Context, arg CreateEntranceParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createEntrance, arg.UserID, arg.EntryTime)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createExit = `-- name: CreateExit :one
INSERT INTO exit (user_id, exit_time) 
VALUES (?, ?)
RETURNING id
`

type CreateExitParams struct {
	UserID   int64 `json:"user_id"`
	ExitTime int64 `json:"exit_time"`
}

func (q *Queries) CreateExit(ctx context.Context, arg CreateExitParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createExit, arg.UserID, arg.ExitTime)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name, last_name, phone_number, image_path, is_teacher, is_biometric_active, finger_id) 
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING user_id
`

type CreateUserParams struct {
	FirstName         string       `json:"first_name"`
	LastName          string       `json:"last_name"`
	PhoneNumber       string       `json:"phone_number"`
	ImagePath         string       `json:"image_path"`
	IsTeacher         bool         `json:"is_teacher"`
	IsBiometricActive sql.NullBool `json:"is_biometric_active"`
	FingerID          string       `json:"finger_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.ImagePath,
		arg.IsTeacher,
		arg.IsBiometricActive,
		arg.FingerID,
	)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admin 
WHERE user_name = ?
`

func (q *Queries) DeleteAdmin(ctx context.Context, userName string) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, userName)
	return err
}

const deleteEntrance = `-- name: DeleteEntrance :exec
DELETE FROM entrance 
WHERE id = ?
`

func (q *Queries) DeleteEntrance(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntrance, id)
	return err
}

const deleteExit = `-- name: DeleteExit :exec
DELETE FROM exit 
WHERE id = ?
`

func (q *Queries) DeleteExit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExit, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getAdminByUserName = `-- name: GetAdminByUserName :one
SELECT user_name, password
FROM admin
WHERE user_name = ?
`

func (q *Queries) GetAdminByUserName(ctx context.Context, userName string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByUserName, userName)
	var i Admin
	err := row.Scan(&i.UserName, &i.Password)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, first_name, last_name, phone_number, image_path, is_teacher, is_biometric_active, finger_id 
FROM users
`

type GetAllUsersRow struct {
	UserID            int64        `json:"user_id"`
	FirstName         string       `json:"first_name"`
	LastName          string       `json:"last_name"`
	PhoneNumber       string       `json:"phone_number"`
	ImagePath         string       `json:"image_path"`
	IsTeacher         bool         `json:"is_teacher"`
	IsBiometricActive sql.NullBool `json:"is_biometric_active"`
	FingerID          string       `json:"finger_id"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.ImagePath,
			&i.IsTeacher,
			&i.IsBiometricActive,
			&i.FingerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimeRange = `-- name: GetTimeRange :many
SELECT 
    u.first_name,
    u.last_name,
    u.phone_number,
    e.entry_time,
    ex.exit_time
FROM 
    users u
JOIN 
    entrance e ON u.user_id = e.user_id
JOIN 
    exit ex ON u.user_id = ex.user_id
WHERE 
    e.entry_time >= ?
    AND ex.exit_time <= ?
    AND e.entry_time <= ex.exit_time
`

type GetTimeRangeParams struct {
	EntryTime int64 `json:"entry_time"`
	ExitTime  int64 `json:"exit_time"`
}

type GetTimeRangeRow struct {
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	PhoneNumber string `json:"phone_number"`
	EntryTime   int64  `json:"entry_time"`
	ExitTime    int64  `json:"exit_time"`
}

func (q *Queries) GetTimeRange(ctx context.Context, arg GetTimeRangeParams) ([]GetTimeRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimeRange, arg.EntryTime, arg.ExitTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimeRangeRow
	for rows.Next() {
		var i GetTimeRangeRow
		if err := rows.Scan(
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.EntryTime,
			&i.ExitTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimeRangeByUserID = `-- name: GetTimeRangeByUserID :many
SELECT 
    u.user_id,           
    u.first_name,
    u.last_name,
    u.phone_number,
    e.entry_time,
    ex.exit_time
FROM 
    users u
JOIN 
    entrance e ON u.user_id = e.user_id
JOIN 
    exit ex ON u.user_id = ex.user_id
WHERE 
    u.user_id = ?           
    AND e.entry_time >= ?   
    AND ex.exit_time <= ?   
    AND e.entry_time <= ex.exit_time
`

type GetTimeRangeByUserIDParams struct {
	UserID    int64 `json:"user_id"`
	EntryTime int64 `json:"entry_time"`
	ExitTime  int64 `json:"exit_time"`
}

type GetTimeRangeByUserIDRow struct {
	UserID      int64  `json:"user_id"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	PhoneNumber string `json:"phone_number"`
	EntryTime   int64  `json:"entry_time"`
	ExitTime    int64  `json:"exit_time"`
}

func (q *Queries) GetTimeRangeByUserID(ctx context.Context, arg GetTimeRangeByUserIDParams) ([]GetTimeRangeByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimeRangeByUserID, arg.UserID, arg.EntryTime, arg.ExitTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimeRangeByUserIDRow
	for rows.Next() {
		var i GetTimeRangeByUserIDRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.EntryTime,
			&i.ExitTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, first_name, last_name, phone_number, image_path, is_teacher, is_biometric_active, finger_id
FROM users 
WHERE user_id = ?
`

type GetUserByIDRow struct {
	UserID            int64        `json:"user_id"`
	FirstName         string       `json:"first_name"`
	LastName          string       `json:"last_name"`
	PhoneNumber       string       `json:"phone_number"`
	ImagePath         string       `json:"image_path"`
	IsTeacher         bool         `json:"is_teacher"`
	IsBiometricActive sql.NullBool `json:"is_biometric_active"`
	FingerID          string       `json:"finger_id"`
}

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ImagePath,
		&i.IsTeacher,
		&i.IsBiometricActive,
		&i.FingerID,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT user_id, first_name, last_name, phone_number, image_path, is_teacher, is_biometric_active, finger_id
FROM users
WHERE first_name = ? AND last_name = ?
`

type GetUserByNameParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

type GetUserByNameRow struct {
	UserID            int64        `json:"user_id"`
	FirstName         string       `json:"first_name"`
	LastName          string       `json:"last_name"`
	PhoneNumber       string       `json:"phone_number"`
	ImagePath         string       `json:"image_path"`
	IsTeacher         bool         `json:"is_teacher"`
	IsBiometricActive sql.NullBool `json:"is_biometric_active"`
	FingerID          string       `json:"finger_id"`
}

func (q *Queries) GetUserByName(ctx context.Context, arg GetUserByNameParams) (GetUserByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, arg.FirstName, arg.LastName)
	var i GetUserByNameRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ImagePath,
		&i.IsTeacher,
		&i.IsBiometricActive,
		&i.FingerID,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT user_id, first_name, last_name, phone_number, image_path, is_teacher, is_biometric_active, finger_id
FROM users
WHERE phone_number = ?
`

type GetUserByPhoneNumberRow struct {
	UserID            int64        `json:"user_id"`
	FirstName         string       `json:"first_name"`
	LastName          string       `json:"last_name"`
	PhoneNumber       string       `json:"phone_number"`
	ImagePath         string       `json:"image_path"`
	IsTeacher         bool         `json:"is_teacher"`
	IsBiometricActive sql.NullBool `json:"is_biometric_active"`
	FingerID          string       `json:"finger_id"`
}

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (GetUserByPhoneNumberRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneNumber, phoneNumber)
	var i GetUserByPhoneNumberRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ImagePath,
		&i.IsTeacher,
		&i.IsBiometricActive,
		&i.FingerID,
	)
	return i, err
}

const updateAdmin = `-- name: UpdateAdmin :exec
UPDATE admin
SET password = ?
WHERE user_name = ?
`

type UpdateAdminParams struct {
	Password string `json:"password"`
	UserName string `json:"user_name"`
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) error {
	_, err := q.db.ExecContext(ctx, updateAdmin, arg.Password, arg.UserName)
	return err
}

const updateEntrance = `-- name: UpdateEntrance :exec
UPDATE entrance 
SET entry_time = ?
WHERE id = ?
`

type UpdateEntranceParams struct {
	EntryTime int64 `json:"entry_time"`
	ID        int64 `json:"id"`
}

func (q *Queries) UpdateEntrance(ctx context.Context, arg UpdateEntranceParams) error {
	_, err := q.db.ExecContext(ctx, updateEntrance, arg.EntryTime, arg.ID)
	return err
}

const updateExit = `-- name: UpdateExit :exec
UPDATE exit 
SET exit_time = ?
WHERE id = ?
`

type UpdateExitParams struct {
	ExitTime int64 `json:"exit_time"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateExit(ctx context.Context, arg UpdateExitParams) error {
	_, err := q.db.ExecContext(ctx, updateExit, arg.ExitTime, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET first_name = ?, last_name = ?, phone_number = ?, image_path = ?, is_teacher = ?, is_biometric_active = ?, finger_id = ? 
WHERE user_id = ?
`

type UpdateUserParams struct {
	FirstName         string       `json:"first_name"`
	LastName          string       `json:"last_name"`
	PhoneNumber       string       `json:"phone_number"`
	ImagePath         string       `json:"image_path"`
	IsTeacher         bool         `json:"is_teacher"`
	IsBiometricActive sql.NullBool `json:"is_biometric_active"`
	FingerID          string       `json:"finger_id"`
	UserID            int64        `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.ImagePath,
		arg.IsTeacher,
		arg.IsBiometricActive,
		arg.FingerID,
		arg.UserID,
	)
	return err
}
