// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admin (user_name, password)
VALUES (?, ?)
RETURNING user_name
`

type CreateAdminParams struct {
	UserName string `json:"user_name"`
	Password string `json:"password"`
}

// Queries for Admin
func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, arg.UserName, arg.Password)
	var user_name string
	err := row.Scan(&user_name)
	return user_name, err
}

const createEntrance = `-- name: CreateEntrance :one
INSERT INTO entrance (user_id, entry_time)
VALUES (?, ?)
RETURNING id
`

type CreateEntranceParams struct {
	UserID    int64 `json:"user_id"`
	EntryTime int64 `json:"entry_time"`
}

// Queries for Entrance
func (q *Queries) CreateEntrance(ctx context.Context, arg CreateEntranceParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createEntrance, arg.UserID, arg.EntryTime)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createExit = `-- name: CreateExit :one
INSERT INTO exit (user_id, exit_time)
VALUES (?, ?)
RETURNING id
`

type CreateExitParams struct {
	UserID   int64 `json:"user_id"`
	ExitTime int64 `json:"exit_time"`
}

// Queries for Exit
func (q *Queries) CreateExit(ctx context.Context, arg CreateExitParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createExit, arg.UserID, arg.ExitTime)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (user_id, required_entry_time)
VALUES (?, ?)
RETURNING student_id
`

type CreateStudentParams struct {
	UserID            int64 `json:"user_id"`
	RequiredEntryTime int64 `json:"required_entry_time"`
}

// Queries for Students
func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createStudent, arg.UserID, arg.RequiredEntryTime)
	var student_id int64
	err := row.Scan(&student_id)
	return student_id, err
}

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers (user_id, sunday_entry_time, monday_entry_time, tuesday_entry_time, wednesday_entry_time, thursday_entry_time, friday_entry_time, saturday_entry_time)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING teacher_id
`

type CreateTeacherParams struct {
	UserID             int64 `json:"user_id"`
	SundayEntryTime    int64 `json:"sunday_entry_time"`
	MondayEntryTime    int64 `json:"monday_entry_time"`
	TuesdayEntryTime   int64 `json:"tuesday_entry_time"`
	WednesdayEntryTime int64 `json:"wednesday_entry_time"`
	ThursdayEntryTime  int64 `json:"thursday_entry_time"`
	FridayEntryTime    int64 `json:"friday_entry_time"`
	SaturdayEntryTime  int64 `json:"saturday_entry_time"`
}

// Queries for Teachers
func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTeacher,
		arg.UserID,
		arg.SundayEntryTime,
		arg.MondayEntryTime,
		arg.TuesdayEntryTime,
		arg.WednesdayEntryTime,
		arg.ThursdayEntryTime,
		arg.FridayEntryTime,
		arg.SaturdayEntryTime,
	)
	var teacher_id int64
	err := row.Scan(&teacher_id)
	return teacher_id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name, last_name, phone_number, image_path, finger_id, is_biometric_active)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING user_id
`

type CreateUserParams struct {
	FirstName         string `json:"first_name"`
	LastName          string `json:"last_name"`
	PhoneNumber       string `json:"phone_number"`
	ImagePath         string `json:"image_path"`
	FingerID          string `json:"finger_id"`
	IsBiometricActive bool   `json:"is_biometric_active"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.ImagePath,
		arg.FingerID,
		arg.IsBiometricActive,
	)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admin
WHERE user_name = ?
`

func (q *Queries) DeleteAdmin(ctx context.Context, userName string) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, userName)
	return err
}

const deleteEntrance = `-- name: DeleteEntrance :exec
DELETE FROM entrance
WHERE id = ?
`

func (q *Queries) DeleteEntrance(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntrance, id)
	return err
}

const deleteExit = `-- name: DeleteExit :exec
DELETE FROM exit
WHERE id = ?
`

func (q *Queries) DeleteExit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExit, id)
	return err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students
WHERE student_id = ?
`

func (q *Queries) DeleteStudent(ctx context.Context, studentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, studentID)
	return err
}

const deleteTeacher = `-- name: DeleteTeacher :exec
DELETE FROM teachers
WHERE teacher_id = ?
`

func (q *Queries) DeleteTeacher(ctx context.Context, teacherID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacher, teacherID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getAdminByUserName = `-- name: GetAdminByUserName :one
SELECT user_name, password
FROM admin
WHERE user_name = ?
`

func (q *Queries) GetAdminByUserName(ctx context.Context, userName string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByUserName, userName)
	var i Admin
	err := row.Scan(&i.UserName, &i.Password)
	return i, err
}

const getEntranceByUserID = `-- name: GetEntranceByUserID :one
SELECT id, user_id, entry_time
FROM entrance
WHERE user_id = ?
`

func (q *Queries) GetEntranceByUserID(ctx context.Context, userID int64) (Entrance, error) {
	row := q.db.QueryRowContext(ctx, getEntranceByUserID, userID)
	var i Entrance
	err := row.Scan(&i.ID, &i.UserID, &i.EntryTime)
	return i, err
}

const getExitByUserID = `-- name: GetExitByUserID :one
SELECT id, user_id, exit_time
FROM exit
WHERE user_id = ?
`

func (q *Queries) GetExitByUserID(ctx context.Context, userID int64) (Exit, error) {
	row := q.db.QueryRowContext(ctx, getExitByUserID, userID)
	var i Exit
	err := row.Scan(&i.ID, &i.UserID, &i.ExitTime)
	return i, err
}

const getStudentByID = `-- name: GetStudentByID :one
SELECT s.student_id, s.user_id, u.first_name, u.last_name, s.required_entry_time
FROM students s
JOIN users u ON s.user_id = u.user_id
WHERE s.student_id = ?
`

type GetStudentByIDRow struct {
	StudentID         int64  `json:"student_id"`
	UserID            int64  `json:"user_id"`
	FirstName         string `json:"first_name"`
	LastName          string `json:"last_name"`
	RequiredEntryTime int64  `json:"required_entry_time"`
}

func (q *Queries) GetStudentByID(ctx context.Context, studentID int64) (GetStudentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentByID, studentID)
	var i GetStudentByIDRow
	err := row.Scan(
		&i.StudentID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.RequiredEntryTime,
	)
	return i, err
}

const getTeacherByID = `-- name: GetTeacherByID :one
SELECT t.teacher_id, t.user_id, u.first_name, u.last_name, t.sunday_entry_time, t.monday_entry_time, t.tuesday_entry_time, t.wednesday_entry_time, t.thursday_entry_time, t.friday_entry_time, t.saturday_entry_time
FROM teachers t
JOIN users u ON t.user_id = u.user_id
WHERE t.teacher_id = ?
`

type GetTeacherByIDRow struct {
	TeacherID          int64  `json:"teacher_id"`
	UserID             int64  `json:"user_id"`
	FirstName          string `json:"first_name"`
	LastName           string `json:"last_name"`
	SundayEntryTime    int64  `json:"sunday_entry_time"`
	MondayEntryTime    int64  `json:"monday_entry_time"`
	TuesdayEntryTime   int64  `json:"tuesday_entry_time"`
	WednesdayEntryTime int64  `json:"wednesday_entry_time"`
	ThursdayEntryTime  int64  `json:"thursday_entry_time"`
	FridayEntryTime    int64  `json:"friday_entry_time"`
	SaturdayEntryTime  int64  `json:"saturday_entry_time"`
}

func (q *Queries) GetTeacherByID(ctx context.Context, teacherID int64) (GetTeacherByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTeacherByID, teacherID)
	var i GetTeacherByIDRow
	err := row.Scan(
		&i.TeacherID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.SundayEntryTime,
		&i.MondayEntryTime,
		&i.TuesdayEntryTime,
		&i.WednesdayEntryTime,
		&i.ThursdayEntryTime,
		&i.FridayEntryTime,
		&i.SaturdayEntryTime,
	)
	return i, err
}

const getTimeRange = `-- name: GetTimeRange :many
SELECT 
    u.user_id,
    u.first_name,
    u.last_name,
    e.entry_time,
    ex.exit_time
FROM 
    users u
JOIN 
    entrance e ON u.user_id = e.user_id
JOIN 
    exit ex ON u.user_id = ex.user_id
WHERE 
    e.entry_time >= ? 
    AND ex.exit_time <= ?
    AND e.entry_time <= ex.exit_time
ORDER BY e.entry_time ASC
`

type GetTimeRangeParams struct {
	EntryTime int64 `json:"entry_time"`
	ExitTime  int64 `json:"exit_time"`
}

type GetTimeRangeRow struct {
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	EntryTime int64  `json:"entry_time"`
	ExitTime  int64  `json:"exit_time"`
}

// Queries for Time Range
func (q *Queries) GetTimeRange(ctx context.Context, arg GetTimeRangeParams) ([]GetTimeRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimeRange, arg.EntryTime, arg.ExitTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimeRangeRow
	for rows.Next() {
		var i GetTimeRangeRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.EntryTime,
			&i.ExitTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimeRangeByUserID = `-- name: GetTimeRangeByUserID :many
SELECT 
    u.user_id,
    u.first_name,
    u.last_name,
    e.entry_time,
    ex.exit_time
FROM 
    users u
JOIN 
    entrance e ON u.user_id = e.user_id
JOIN 
    exit ex ON u.user_id = ex.user_id
WHERE 
    u.user_id = ?
    AND e.entry_time >= ?
    AND ex.exit_time <= ?
    AND e.entry_time <= ex.exit_time
ORDER BY e.entry_time ASC
`

type GetTimeRangeByUserIDParams struct {
	UserID    int64 `json:"user_id"`
	EntryTime int64 `json:"entry_time"`
	ExitTime  int64 `json:"exit_time"`
}

type GetTimeRangeByUserIDRow struct {
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	EntryTime int64  `json:"entry_time"`
	ExitTime  int64  `json:"exit_time"`
}

func (q *Queries) GetTimeRangeByUserID(ctx context.Context, arg GetTimeRangeByUserIDParams) ([]GetTimeRangeByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimeRangeByUserID, arg.UserID, arg.EntryTime, arg.ExitTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimeRangeByUserIDRow
	for rows.Next() {
		var i GetTimeRangeByUserIDRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.EntryTime,
			&i.ExitTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, first_name, last_name, phone_number, image_path, finger_id, is_biometric_active
FROM users
WHERE user_id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ImagePath,
		&i.FingerID,
		&i.IsBiometricActive,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT user_id, first_name, last_name, phone_number, image_path, finger_id, is_biometric_active
FROM users
WHERE phone_number = ?
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ImagePath,
		&i.FingerID,
		&i.IsBiometricActive,
	)
	return i, err
}

const updateAdmin = `-- name: UpdateAdmin :exec
UPDATE admin
SET password = ?
WHERE user_name = ?
`

type UpdateAdminParams struct {
	Password string `json:"password"`
	UserName string `json:"user_name"`
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) error {
	_, err := q.db.ExecContext(ctx, updateAdmin, arg.Password, arg.UserName)
	return err
}

const updateEntrance = `-- name: UpdateEntrance :exec
UPDATE entrance
SET entry_time = ?
WHERE id = ?
`

type UpdateEntranceParams struct {
	EntryTime int64 `json:"entry_time"`
	ID        int64 `json:"id"`
}

func (q *Queries) UpdateEntrance(ctx context.Context, arg UpdateEntranceParams) error {
	_, err := q.db.ExecContext(ctx, updateEntrance, arg.EntryTime, arg.ID)
	return err
}

const updateExit = `-- name: UpdateExit :exec
UPDATE exit
SET exit_time = ?
WHERE id = ?
`

type UpdateExitParams struct {
	ExitTime int64 `json:"exit_time"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateExit(ctx context.Context, arg UpdateExitParams) error {
	_, err := q.db.ExecContext(ctx, updateExit, arg.ExitTime, arg.ID)
	return err
}

const updateStudentAllowedTime = `-- name: UpdateStudentAllowedTime :exec
UPDATE students
SET required_entry_time = ?
WHERE student_id = ?
`

type UpdateStudentAllowedTimeParams struct {
	RequiredEntryTime int64 `json:"required_entry_time"`
	StudentID         int64 `json:"student_id"`
}

func (q *Queries) UpdateStudentAllowedTime(ctx context.Context, arg UpdateStudentAllowedTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentAllowedTime, arg.RequiredEntryTime, arg.StudentID)
	return err
}

const updateTeacherAllowedTime = `-- name: UpdateTeacherAllowedTime :exec
UPDATE teachers
SET sunday_entry_time = ?, monday_entry_time = ?, tuesday_entry_time = ?, wednesday_entry_time = ?, thursday_entry_time = ?, friday_entry_time = ?, saturday_entry_time = ?
WHERE teacher_id = ?
`

type UpdateTeacherAllowedTimeParams struct {
	SundayEntryTime    int64 `json:"sunday_entry_time"`
	MondayEntryTime    int64 `json:"monday_entry_time"`
	TuesdayEntryTime   int64 `json:"tuesday_entry_time"`
	WednesdayEntryTime int64 `json:"wednesday_entry_time"`
	ThursdayEntryTime  int64 `json:"thursday_entry_time"`
	FridayEntryTime    int64 `json:"friday_entry_time"`
	SaturdayEntryTime  int64 `json:"saturday_entry_time"`
	TeacherID          int64 `json:"teacher_id"`
}

func (q *Queries) UpdateTeacherAllowedTime(ctx context.Context, arg UpdateTeacherAllowedTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateTeacherAllowedTime,
		arg.SundayEntryTime,
		arg.MondayEntryTime,
		arg.TuesdayEntryTime,
		arg.WednesdayEntryTime,
		arg.ThursdayEntryTime,
		arg.FridayEntryTime,
		arg.SaturdayEntryTime,
		arg.TeacherID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET first_name = ?, last_name = ?, phone_number = ?, image_path = ?
WHERE user_id = ?
`

type UpdateUserParams struct {
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	PhoneNumber string `json:"phone_number"`
	ImagePath   string `json:"image_path"`
	UserID      int64  `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.ImagePath,
		arg.UserID,
	)
	return err
}

const updateUserBiometric = `-- name: UpdateUserBiometric :exec
UPDATE users
SET image_path = ?, finger_id = ?, is_biometric_active = ?
WHERE user_id = ?
`

type UpdateUserBiometricParams struct {
	ImagePath         string `json:"image_path"`
	FingerID          string `json:"finger_id"`
	IsBiometricActive bool   `json:"is_biometric_active"`
	UserID            int64  `json:"user_id"`
}

func (q *Queries) UpdateUserBiometric(ctx context.Context, arg UpdateUserBiometricParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBiometric,
		arg.ImagePath,
		arg.FingerID,
		arg.IsBiometricActive,
		arg.UserID,
	)
	return err
}
